```You can use Python to programmatically check for installed packages on a Linux system. Here's a simple script that demonstrates how to do this using the `subprocess` module to execute shell commands:

```python
import subprocess

def get_installed_packages():
   try:
       # Check if the system is using dpkg (Debian-based) or rpm (Red Hat-based)
       dpkg_check = subprocess.run(['which', 'dpkg'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
       rpm_check = subprocess.run(['which', 'rpm'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

       if dpkg_check.returncode == 0:  # Debian-based
           result = subprocess.run(['dpkg', '--get-selections'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
           installed_packages = result.stdout.split('\n')

       elif rpm_check.returncode == 0:  # Red Hat-based
           result = subprocess.run(['rpm', '-qa'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
           installed_packages = result.stdout.split('\n')

       else:
           raise Exception("Unsupported package manager")

       return [pkg.split('\t')[0] for pkg in installed_packages if pkg]

   except Exception as e:
       print(f"An error occurred: {e}")
       return []

if __name__ == "__main__":
   installed_packages = get_installed_packages()
   print("Installed packages:")
   for pkg in installed_packages:
       print(pkg)
```

```This script attempts to detect whether the system is using `dpkg` or `rpm`, then executes the appropriate command to retrieve the list of installed packages. It then prints out the list of installed packages.

```You can further extend this script to cover more package managers or refine it based on specific requirements. Additionally, make sure to run this script with appropriate permissions, especially if it requires accessing system package information.
